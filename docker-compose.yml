version: '3.11'
services:
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: news_bot
    env_file:
      - ./.env
    environment:
      - API_URL=http://api:8000/api/v1
    depends_on:
      api:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: news_api
    volumes:
      - ./api/src/:/app/
      - .env:/app/.env
      - ./api/log:/app/log
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    ports:
      - 8000:8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  scrapyd:
    build:
      context: ./scrapy
      dockerfile: Dockerfile
    container_name: news_scrapy
    env_file:
      - ./.env
    environment:
      - API_URL=http://api:8000/api/v1
    volumes:
      - ./scrapy/logs/:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    ports:
      - '6800:6800'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6800/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  db:
    image: postgres:12
    container_name: news_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - app-network
    ports:
      - 127.0.0.1:5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
