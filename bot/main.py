import os
import re
import asyncio
import aiohttp
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.bot import DefaultBotProperties
from aiogram.types import ContentType, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart, Command
from aiogram.enums.parse_mode import ParseMode
from tenacity import retry, stop_after_attempt, wait_exponential
from urllib.parse import urlparse
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
AUTHORIZED_PASSWORD = os.getenv('TELEGRAM_BOT_PASSWORD')
FASTAPI_URL = os.getenv('API_URL')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([API_TOKEN, AUTHORIZED_PASSWORD, FASTAPI_URL]):
    missing_vars = []
    if not API_TOKEN:
        missing_vars.append('TELEGRAM_BOT_TOKEN')
    if not AUTHORIZED_PASSWORD:
        missing_vars.append('TELEGRAM_BOT_PASSWORD')
    if not FASTAPI_URL:
        missing_vars.append('API_URL')
    error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}"
    logger.error(error_msg)
    raise RuntimeError(error_msg)

logger.info(f"FASTAPI_URL = {FASTAPI_URL}")

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–º–µ–Ω–∞
DOMAIN_REGEX = re.compile(r'https?://(www\.)?([^/]+)')

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
ALLOWED_DOMAINS = ['reuters.com', 'ft.com', 'thenationalnews.com', 'wsj.com']

DOMAIN_SPIDER_MAP = {
    'reuters.com': 'reuters_spider',
    'ft.com': 'ft_spider',
    'thenationalnews.com': 'national_spider',
    'wsj.com': 'wsj_spider'
}

DOMAIN_SOURCE_MAP = {
    'reuters.com': 'Reuters',
    'ft.com': 'Financial Times',
    'thenationalnews.com': 'The National',
    'wsj.com': 'The Wall Street Journal'
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
authorized_users = set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ API –∑–∞–ø—Ä–æ—Å–æ–≤
@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))
async def make_api_request(session, url, method='GET', **kwargs):
    try:
        async with getattr(session, method.lower())(url, **kwargs) as response:
            if response.status == 200:
                return await response.json()
            elif response.status == 422:
                data = await response.json()
                raise ValueError(data.get('detail', 'Validation error'))
            else:
                raise aiohttp.ClientError(f"API request failed with status {response.status}")
    except Exception as e:
        logger.error(f"API request failed: {str(e)}")
        raise

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ FastAPI
async def trigger_scrapy_spider(spider_name, url):
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ {FASTAPI_URL}/schedule/ –¥–ª—è spider={spider_name}, url={url}")
    async with aiohttp.ClientSession() as session:
        try:
            data = await make_api_request(
                session,
                f'{FASTAPI_URL}/schedule/',
                method='POST',
                json={'spider': spider_name, 'url': url}
            )
            return data.get('jobid')
        except Exception as e:
            logger.error(f"Failed to trigger spider: {str(e)}")
            return None

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—É–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ–º–µ–Ω–∞
def get_spider_name_by_domain(url):
    try:
        domain = urlparse(url).netloc
        for allowed in ALLOWED_DOMAINS:
            if allowed in domain:
                return DOMAIN_SPIDER_MAP.get(allowed)
        return None
    except Exception as e:
        logger.error(f"Error parsing domain: {str(e)}")
        return None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–ø—Ü–∏—è–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ Telegraph
def item_events_markup(job_id: str):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text='üì∞ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏',
            callback_data=f'get_link:{job_id}'
        )
    ]])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–ø—Ü–∏—è–º–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Å–∞–º–º–∞—Ä–∏ —Å—Ç–∞—Ç—å–∏
def item_options_markup(item_id: str):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text='üåê –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—å–∏',
            callback_data=f'translate:{item_id}'
        ),
        InlineKeyboardButton(
            text='‚úèÔ∏è –°–∞–º–º–∞—Ä–∏ —Å—Ç–∞—Ç—å–∏',
            callback_data=f'summary:{item_id}'
        )
    ]])

def item_translate_button(item_id: str):
    return [InlineKeyboardButton(
        text='üá∑üá∫ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—å–∏',
        callback_data=f'get_translate:{item_id}'
    )]

def item_summary_button(item_id: str):
    return [InlineKeyboardButton(
        text='üìù –ü–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ —Å—Ç–∞—Ç—å–∏',
        callback_data=f'get_summary:{item_id}'
    )]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! üëã –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ '
        '–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /login <–ø–∞—Ä–æ–ª—å>'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /login
@dp.message(Command('login'))
async def login_command(message: types.Message):
    try:
        password = message.text.split()[1]
    except IndexError:
        await message.answer(
            '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /login <–ø–∞—Ä–æ–ª—å>.'
        )
        return

    if password == AUTHORIZED_PASSWORD:
        authorized_users.add(message.from_user.id)
        await message.answer(
            '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! üëç\n'
            '–¢–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ '
            '–¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç–∞—Ç–µ–π.'
        )
    else:
        await message.answer('‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å—é
@dp.message(~F.text.startswith("/"))
async def handle_message(message: types.Message):
    if message.from_user.id not in authorized_users:
        await message.answer(
            '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /login.'
        )
        return

    url = message.text.strip()
    domain_match = DOMAIN_REGEX.search(url)
    if not domain_match:
        await message.answer(
            '‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É.\n\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.'
        )
        return

    domain = domain_match.group(2)
    if domain not in ALLOWED_DOMAINS or not DOMAIN_SPIDER_MAP.get(domain):
        await message.answer(
            f'‚ö†Ô∏è –î–æ–º–µ–Ω {domain} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n'
            f'–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é —Å –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–∞–π—Ç–æ–≤: {", ".join(ALLOWED_DOMAINS)}.'
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    try:
        async with aiohttp.ClientSession() as session:
            data = await make_api_request(
                session,
                f'{FASTAPI_URL}/scrapyd/schedule/',
                method='POST',
                params={'chat_id': message.chat.id, 'url': url}
            )
            await message.answer(
                '‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...',
                parse_mode=ParseMode.HTML
            )
    except ValueError as e:
        await message.answer(str(e))
    except Exception as e:
        logger.error(f"Error processing URL: {str(e)}")
        await message.answer(
            '‚ÄºÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def callback_query_handler(call: types.CallbackQuery):
    try:
        action, id_ = call.data.split(':')
        async with aiohttp.ClientSession() as session:
            if action == 'get_translate':
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ {FASTAPI_URL}/items/{id_}/translate")
                await make_api_request(
                    session,
                    f'{FASTAPI_URL}/items/{id_}/translate',
                    method='GET'
                )
                message = '‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...'
            elif action == 'get_summary':
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ {FASTAPI_URL}/items/{id_}/summarize")
                await make_api_request(
                    session,
                    f'{FASTAPI_URL}/items/{id_}/summarize',
                    method='GET'
                )
                message = '‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...'
            else:
                message = '‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
            
            await call.message.answer(message, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"Error in callback handler: {str(e)}")
        await call.message.answer(
            '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )

async def main():
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º webhook, —á—Ç–æ–±—ã Telegram –Ω–µ –ø—ã—Ç–∞–ª—Å—è –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ HTTP
        await bot.delete_webhook(drop_pending_updates=True)
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error in main: {str(e)}")
        raise

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot stopped due to error: {str(e)}")
        raise
